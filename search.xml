<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/09/23/linux/"/>
      <url>/2020/09/23/linux/</url>
      
        <content type="html"><![CDATA[<p>1.购买服务器</p><p>2.<strong>authorized_keys</strong></p><p><a href="https://blog.csdn.net/alifrank/article/details/48241699">https://blog.csdn.net/alifrank/article/details/48241699</a></p><p><a href="https://blog.csdn.net/xlgen157387/article/details/52669709">https://blog.csdn.net/xlgen157387/article/details/52669709</a></p><p>3.install node</p><p><a href="https://blog.csdn.net/qq_38543537/article/details/90899119">https://blog.csdn.net/qq_38543537/article/details/90899119</a></p><p>2.安装git,配置密钥</p><p>yum install git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1）生成密钥，一路回车、用默认选项</span><br><span class="line">ssh-keygen -t rsa              </span><br><span class="line"> </span><br><span class="line">#2）复制到粘贴板</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub | clip    # Windows</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub | pbcopy  # MacOS</span><br><span class="line"></span><br><span class="line">#3)</span><br><span class="line">github add ssh key</span><br></pre></td></tr></table></figure><p>4.为了拉取github上的代码</p><p>重置git配置：用户名与密码</p><p><a href="https://www.cnblogs.com/shenxiaolin/p/7896489.html">https://www.cnblogs.com/shenxiaolin/p/7896489.html</a></p><p>4.部署</p><p>解决部署时：Host key verification failed.的问题：ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</p><p><a href="https://stackoverflow.com/questions/13363553/git-error-host-key-verification-failed-when-connecting-to-remote-repository">https://stackoverflow.com/questions/13363553/git-error-host-key-verification-failed-when-connecting-to-remote-repository</a></p><p>5.commit or stash your changes before deploying</p><p>解决办法：pm2 deploy pm2.json production –force</p><p><a href="https://github.com/Unitech/pm2/issues/2758">https://github.com/Unitech/pm2/issues/2758</a></p><p>6.安装deno，建立软连接</p><p>![image-20200923152541695](/Users/wangzongyao/Library/Application Support/typora-user-images/image-20200923152541695.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react-router：browserRouter与hashRouter</title>
      <link href="/2020/08/30/BrowserRouter/"/>
      <url>/2020/08/30/BrowserRouter/</url>
      
        <content type="html"><![CDATA[<h3 id="react-router【browserRouter与hashRouter】"><a href="#react-router【browserRouter与hashRouter】" class="headerlink" title="react-router【browserRouter与hashRouter】"></a>react-router【browserRouter与hashRouter】</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>构建react项目中，控制路由跳转使用react-router，react-router是以<a href="https://github.com/ReactTraining/history/blob/master/docs/getting-started.md">history</a>为基础的</p><ul><li>A “<strong>browser history</strong>“ is for use in modern web browsers that support the <a href="http://diveintohtml5.info/history.html">HTML5 history API</a> (see <a href="http://caniuse.com/#feat=history">cross-browser compatibility</a>)</li><li>A “<strong>hash history</strong>“ is for use in web browsers where you want to store the location in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/hash">hash</a> portion of the current URL <u>to avoid sending it to the server when the page reloads</u></li><li>A “<strong>memory history</strong>“ is used as a reference implementation that may be used <u>in non-browser environments</u>, like <a href="https://facebook.github.io/react-native/">React Native</a> or tests</li></ul><p>由于hash值变化不会导致浏览器向服务器发出请求，而且hash改变会触发hashchange事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的</p><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><p>1.浏览器history对象是window对象的一部分，可通过 window.history 属性对其进行访问，其操作的是浏览器的<strong>session history</strong>，即当前回话窗口的history。这是H5提供新的特新，也是以上依赖包的基础；</p><p>2.hash值变化不会导致浏览器向服务器发出请求，且hash改变会触发hashchange事件，浏览器的进后退也能对其进行控制。在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的；</p><p>3.history依赖包提供了history.listen(myListener)方法，以供使用监听路由变化的逻辑；</p><p>4.关于使用browserRouter时，页面404的解释：没有配置historyApiFallback，即页面没有初始化路由与组件的联系（<a href="https://www.npmjs.com/package/connect-history-api-fallback">connect-history-api-fallback</a>），导致的该路由没有可渲染的组件。可通过webpack配置<code>devServer：&#123;historyApiFallback: true&#125;</code>解决；</p><h4 id="二、browser与hash对比说明"><a href="#二、browser与hash对比说明" class="headerlink" title="二、browser与hash对比说明"></a>二、browser与hash对比说明</h4><h5 id="1-hashRouter"><a href="#1-hashRouter" class="headerlink" title="1.hashRouter"></a>1.hashRouter</h5><p>使用 URL 中的 hash（#）部分去创建路由</p><h5 id="2-browserRouter"><a href="#2-browserRouter" class="headerlink" title="2.browserRouter"></a>2.browserRouter</h5><p>使用浏览器中的 History API 用于处理 URL，因此在browserHistory 模式事，URL 是指向<strong>服务器真实 URL 的资源路径</strong>！</p>]]></content>
      
      
      
        <tags>
            
            <tag> react router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS【好文链接】</title>
      <link href="/2020/08/30/good-blog-url/"/>
      <url>/2020/08/30/good-blog-url/</url>
      
        <content type="html"><![CDATA[<h5 id="1、由throw-new-Error-引发的探讨"><a href="#1、由throw-new-Error-引发的探讨" class="headerlink" title="1、由throw new Error() 引发的探讨"></a>1、<a href="https://segmentfault.com/a/1190000010779044">由throw new Error() 引发的探讨</a></h5><h5 id="2、PWA-饿了么实践"><a href="#2、PWA-饿了么实践" class="headerlink" title="2、PWA 饿了么实践"></a>2、<a href="https://zhuanlan.zhihu.com/p/27853228">PWA 饿了么实践</a></h5>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack【dll】</title>
      <link href="/2020/08/30/dll/"/>
      <url>/2020/08/30/dll/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack【dll】"><a href="#webpack【dll】" class="headerlink" title="webpack【dll】"></a>webpack【dll】</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><h5 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1.名词解释"></a>1.名词解释</h5><p>dll（Dynamic Link Library）动态链接库，常见在window系统中，当执行某一个程序时，相应的DLL文件就会被调用。</p><p>将更改不频繁的代码进行单独编译。这将改善引用程序的编译速度，但是它增加了构建过程的复杂性。</p><h5 id="2-为什么使用dll"><a href="#2-为什么使用dll" class="headerlink" title="2.为什么使用dll"></a>2.为什么使用dll</h5><ul><li>把复用性较高的第三方模块打包到动态链接库中，在不升级这些库的情况下，动态库不需要重新打包，每次构建只重新打包业务代码；</li><li>亦可将同类资源各自打包第三方，例如react家族、lodash工具库等；一定范围增加文件个数，减少体积，浏览器并发有利于加载时间。</li></ul><h5 id="3-如何使用dll"><a href="#3-如何使用dll" class="headerlink" title="3.如何使用dll"></a>3.如何使用dll</h5><p>使用<code>DLLPlugin</code> 和 <code>DLLReferencePlugin</code> 实现了拆分 bundles，同时还大大提升了构建的速度；使用 <code>AddAssetHtmlPlugin</code>插件将打包后的 dll bundles插入到页面中；</p><p>Github webpack给出了具体的demo和讲解，<a href="https://github.com/webpack/webpack/tree/master/examples/dll-user">戳</a></p><h6 id="3-1-DLLPlugin"><a href="#3-1-DLLPlugin" class="headerlink" title="3.1 DLLPlugin"></a>3.1 DLLPlugin</h6><p>新建webpack.dll.js配置文件，plugin参数配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LIBRARY = <span class="string">&#x27;[name]_[hash]&#x27;</span></span><br><span class="line">output: &#123;</span><br><span class="line">        filename: <span class="string">`<span class="subst">$&#123;LIBRARY&#125;</span>.dll.js`</span>,</span><br><span class="line">        path: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        library: LIBRARY,</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            <span class="comment">// manifest json 文件的绝对路径 (输出文件)</span></span><br><span class="line">            path: path.join(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;[name]-manifest.json&#x27;</span>),</span><br><span class="line">            <span class="comment">// 暴露出的 DLL 的函数名</span></span><br><span class="line">            name: LIBRARY,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行产出</p><ul><li><p>*.dll.js：文件里是使用数组保存的模块，索引值就作为id；</p></li><li><p>*.manifest.json：文件里，是用来描述对应的dll文件里保存的模块；</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;vendors_b5543b7c65236c1de403&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;./node_modules/@redux-saga/core/dist/io-6de156f3.js&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;buildMeta&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;exportsType&quot;</span>: <span class="string">&quot;namespace&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;providedExports&quot;</span>: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-2-DLLReferencePlugin"><a href="#3-2-DLLReferencePlugin" class="headerlink" title="3.2 DLLReferencePlugin"></a>3.2 DLLReferencePlugin</h6><p>在webpack.common.js配置文件中，添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">       context: __dirname,</span><br><span class="line">       <span class="comment">// eslint-disable-next-line global-require</span></span><br><span class="line">       manifest: <span class="built_in">require</span>(<span class="string">&#x27;./dist/vendors-manifest.json&#x27;</span>),</span><br><span class="line">&#125;),</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DllReferencePlugin去 manifest.json 文件读取 name 字段的值，把值的内容作为在从全局变量中获取动态链接库中内容时的全局变量名；因此，在 webpack.dll.js中，DllPlugin 中的 name 参数必须和 output.library 中保持一致。</p><h6 id="3-3-AddAssetHtmlPlugin"><a href="#3-3-AddAssetHtmlPlugin" class="headerlink" title="3.3 AddAssetHtmlPlugin"></a>3.3 AddAssetHtmlPlugin</h6><p>讲打包后的dll插入到入口html中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</span><br><span class="line">            filepath: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;*.dll.js&#x27;</span>),</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack【plugin-introduce】</title>
      <link href="/2020/08/30/plugin-introduce/"/>
      <url>/2020/08/30/plugin-introduce/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack【plugin-introduce】"><a href="#webpack【plugin-introduce】" class="headerlink" title="webpack【plugin-introduce】"></a>webpack【plugin-introduce】</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>一句话概括plugin的使用场景和作用</p><h5 id="二、Summary"><a href="#二、Summary" class="headerlink" title="二、Summary"></a>二、Summary</h5><p>【<a href="https://www.npmjs.com/package/html-webpack-plugin">htmlWebpackPlugin</a>】：根据模板生成html文件，提供页面配置项。</p><p>【<a href="https://www.npmjs.com/package/clean-webpack-plugin">clean-webpack-plugin</a>】：清理文件夹。</p><p>【<a href="https://www.npmjs.com/package/mini-css-extract-plugin#extracting-css-based-on-entry">mini-css-extract-plugin</a>】：将CSS提取到单独的文件中。它为每个包含CSS的JS文件创建一个CSS文件。它支持CSS和SourceMap的按需加载。不建议在开发环境使用，尤其是启用HMR时，配合fast refresh插件【<a href="https://www.npmjs.com/package/@pmmmwh/react-refresh-webpack-plugin">react-refresh-webpack-plugin</a>】CSS样式更新失效。</p><p>【<a href="https://www.npmjs.com/package/optimize-css-assets-webpack-plugin">optimize-css-assets-webpack-plugin</a>】：在Webpack构建期间搜索CSS资产，并优化\最小化CSS（默认情况下，它使用<a href="http://github.com/ben-eb/cssnano">cssnano，</a>但可以指定自定义CSS处理器）。</p><p>【provide-plugin】：自动加载模块，系统找不到变量时，会自动识别该插件提供的变量ID对应的依赖包或者变量。</p><p>【exports-loader】：使用该插件导出一个全局变量（期望用户使用的变量），例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="built_in">require</span>.resolve(<span class="string">&#x27;globals.js&#x27;</span>), <span class="comment">// 导出的文件</span></span><br><span class="line">    use: <span class="string">&#x27;exports-loader?file,parse=helpers.parse&#x27;</span>  <span class="comment">// 导出的变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack【快速刷新fast-refresh】</title>
      <link href="/2020/08/29/Fast-Refresh/"/>
      <url>/2020/08/29/Fast-Refresh/</url>
      
        <content type="html"><![CDATA[<h3 id="What-Is-Fast-Refresh"><a href="#What-Is-Fast-Refresh" class="headerlink" title="What Is Fast Refresh?"></a>What Is Fast Refresh?</h3><h3 id="什么是快速刷新？"><a href="#什么是快速刷新？" class="headerlink" title="什么是快速刷新？"></a>什么是快速刷新？</h3><p>It’s a reimplementation of “hot reloading” with full support from React. It’s originally <a href="https://twitter.com/dan_abramov/status/1169687758849400832">shipping for React Native</a> but most of the implementation is platform-independent. The plan is to use it across the board — as a replacement for purely userland solutions (like <code>react-hot-loader</code>).</p><p>这是一个重新实施的“热重载”与全面支持的反应。它最初是为 React Native 提供的，但是大多数实现都是独立于平台的。该公司计划全面使用它，作为纯用户界面解决方案(比如 react-hot-loader)的替代品。</p><p>快速刷新源自于TS，详细概念<a href="https://reactnative.cn/docs/next/fast-refresh">戳</a></p><h3 id="Can-I-Use-Fast-Refresh-on-the-Web"><a href="#Can-I-Use-Fast-Refresh-on-the-Web" class="headerlink" title="Can I Use Fast Refresh on the Web?"></a>Can I Use Fast Refresh on the Web?</h3><h3 id="我可以在网上使用快速刷新吗？"><a href="#我可以在网上使用快速刷新吗？" class="headerlink" title="我可以在网上使用快速刷新吗？"></a>我可以在网上使用快速刷新吗？</h3><p>Theoretically, yes, that’s the plan. Practically, someone needs to integrate it with bundlers common on the web (e.g. Webpack, Parcel). I haven’t gotten around to doing that yet. Maybe someone wants to pick it up. This comment is a rough guide for how you’d do it.</p><p>理论上来说，是的，这就是计划。实际上，有人需要将它与网络上常见的捆绑机(如 Webpack、 Parcel)进行整合。我还没有抽出时间来做这件事。也许有人想把它捡起来。这个评论是一个粗略的指南，告诉你如何去做。</p><h3 id="What-Does-It-Consist-Of"><a href="#What-Does-It-Consist-Of" class="headerlink" title="What Does It Consist Of?"></a>What Does It Consist Of?</h3><h3 id="它由什么组成？"><a href="#它由什么组成？" class="headerlink" title="它由什么组成？"></a>它由什么组成？</h3><p>Fast Refresh relies on several pieces working together:</p><p>快速刷新依赖于几个部分一起工作:</p><ul><li>“Hot module replacement” mechanism in the module system.</li></ul><p>  模块系统中的“热模块替换”机制</p><ul><li>That is usually also provided by the bundler. 这通常也是由捆绑机提供的</li><li>E.g. in webpack, 例如在 webpack 中,<code>module.hot</code> API lets you do this. aPI 允许你这样做</li></ul><ul><li>React renderer 16.9.0+ (e.g. React DOM 16.9)</li></ul><p>  反应渲染器16.9.0 + (例如反应 DOM 16.9)</p><ul><li>Or 或者<code>react-reconciler@0.21.0</code> or higher for custom renderers 或更高的定制渲染器</li></ul><ul><li><p><code>react-refresh/runtime</code> entry point 入口点</p></li><li><p><code>react-refresh/babel</code> Babel plugin 巴别塔插件</p></li></ul><p>You’ll probably want to work on the integration part. I.e. integrating <code>react-refresh/runtime</code> with Webpack “hot module replacement” mechanism.</p><p>您可能希望处理集成部分，即将 react-refresh/runtime 与 Webpack“热模块替换”机制集成。</p><h3 id="What’s-Integration-Looking-Like"><a href="#What’s-Integration-Looking-Like" class="headerlink" title="What’s Integration Looking Like?"></a>What’s Integration Looking Like?</h3><h3 id="整合是什么样的？"><a href="#整合是什么样的？" class="headerlink" title="整合是什么样的？"></a>整合是什么样的？</h3><p><strong>⚠️⚠️⚠️ TO BE CLEAR, THIS IS A GUIDE FOR PEOPLE WHO WANT TO IMPLEMENT THE INTEGRATION THEMSELVES. THIS IS NOT A GUIDE FOR BEGINNERS OR PEOPLE WHO WANT TO START USING FAST REFRESH IN THEIR APPS. PROCEED AT YOUR OWN CAUTION! ⚠️⚠️⚠️</strong></p><p>Something something something 要明确，这是一个指南的人谁想要实施一体化自己。这不是一个指导初学者或人谁想开始使用快速刷新在他们的应用程序。按照你自己的谨慎行事！Something something something something</p><p>There are a few things you want to do minimally:</p><p>以下是一些你最低限度需要做的事情:</p><ul><li>Enable HMR in your bundler (e.g. webpack) 在捆绑器中启用 HMR (例如 webpack)</li><li>Ensure React is 16.9.0+ 确保反应是16.9.0 +</li><li>Add 添加<code>react-refresh/babel</code> to your Babel plugins 你的 Babel 插件</li></ul><p>At that point your app should crash. It should contain calls to <code>$RefreshReg$</code> and <code>$RefreshSig$</code> functions which are undefined.</p><p>这时你的应用程序应该崩溃了，它应该包含对 $RefreshReg $和 $RefreshSig $函数的调用，这两个函数没有定义。</p><p>Then you need to create a new JS entry point which <em>must run before any code in your app</em>, including <code>react-dom</code> (!) This is important; if it runs after <code>react-dom</code>, nothing will work. That entry point should do something like this:</p><p>然后您需要创建一个新的 JS 入口点，该入口点必须在应用程序中的任何代码(包括 react-dom (!))之前运行这一点很重要; 如果它在反应之后运行，那么什么都不会起作用。这个切入点应该是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39; &amp;&amp; typeof window !&#x3D;&#x3D; &#39;undefined&#39;) &#123;</span><br><span class="line">  const runtime &#x3D; require(&#39;react-refresh&#x2F;runtime&#39;);</span><br><span class="line">  runtime.injectIntoGlobalHook(window);</span><br><span class="line">  window.$RefreshReg$ &#x3D; () &#x3D;&gt; &#123;&#125;;</span><br><span class="line">  window.$RefreshSig$ &#x3D; () &#x3D;&gt; type &#x3D;&gt; type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This should fix the crashes. But it still won’t do anything because these <code>$RefreshReg$</code> and <code>$RefreshSig$</code> implementations are noops. Hooking them up is the meat of the integration work you need to do.</p><p>这应该可以修复系统崩溃。但是它仍然不能做任何事情，因为这些 $RefreshReg $和 $RefreshSig $实现都是 noops。将它们连接起来是您需要完成的集成工作的主要部分。</p><p>How you do that depends on your bundler. I suppose with webpack you could write a loader that adds some code before and after every module executes. Or maybe there’s some hook to inject something into the module template. Regardless, what you want to achieve is that every module looks like this:</p><p>如何做到这一点取决于你的捆绑机。我认为使用 webpack，您可以编写一个加载程序，在每个模块执行之前和之后添加一些代码。或者可能有一些钩子将某些内容注入模块模板。不管怎样，你想要实现的是每个模块都是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; BEFORE EVERY MODULE EXECUTES</span><br><span class="line"></span><br><span class="line">var prevRefreshReg &#x3D; window.$RefreshReg$;</span><br><span class="line">var prevRefreshSig &#x3D; window.$RefreshSig$;</span><br><span class="line">var RefreshRuntime &#x3D; require(&#39;react-refresh&#x2F;runtime&#39;);</span><br><span class="line"></span><br><span class="line">window.$RefreshReg$ &#x3D; (type, id) &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F; Note module.id is webpack-specific, this may vary in other bundlers</span><br><span class="line">  const fullId &#x3D; module.id + &#39; &#39; + id;</span><br><span class="line">  RefreshRuntime.register(type, fullId);</span><br><span class="line">&#125;</span><br><span class="line">window.$RefreshSig$ &#x3D; RefreshRuntime.createSignatureFunctionForTransform;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; !!!</span><br><span class="line">  &#x2F;&#x2F; ...ACTUAL MODULE SOURCE CODE...</span><br><span class="line">  &#x2F;&#x2F; !!!</span><br><span class="line"></span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  window.$RefreshReg$ &#x3D; prevRefreshReg;</span><br><span class="line">  window.$RefreshSig$ &#x3D; prevRefreshSig;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The idea here is that our Babel plugin emits calls to this functions, and then our integration above ties those calls to the module ID. So that the runtime receives strings like <code>&quot;path/to/Button.js Button&quot;</code> when a component is being registered. (Or, in webpack’s case, IDs would be numbers.) Don’t forget that both Babel transform and this wrapping must <em>only</em> occur in development mode.</p><p>这里的想法是我们的 Babel 插件发出对这个函数的调用，然后我们上面的集成将这些调用绑定到模块 ID。因此，运行时接收类似“ path/to/Button”的字符串。当一个组件正在注册时。(或者，在 webpack 的例子中，id 是数字。)不要忘记 Babel 转换和这种封装只能在开发模式下进行。</p><p>As alternative to wrapping the module code, maybe there’s some way to add a try/finally like this around the place where the bundler actually initializes the module factory. Like we do <a href="https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L355-L379">here</a> in Metro (RN bundler). <strong>This would probably be better</strong> because we wouldn’t need to bloat up every module, or worry about introducing illegal syntax, e.g. when wrapping <code>import</code> with in <code>try / finally</code>.</p><p>作为包装模块代码的替代方法，也许可以在实际初始化模块工厂的位置附近添加一个 try/finally，如下所示。就像我们在麦德龙(RN bundler)做的一样。这可能会更好，因为我们不需要增加每个模块，或者担心引入非法语法，例如在使用 try/finally 包装 import 时。</p><p>Once you hook this up, you have one last problem. Your bundler doesn’t know that you’re handling the updates, so it probably reloads the page anyway. You need to tell it not to. This is again bundler-specific, but the approach I suggest is to check whether <em>all of the exports are React components</em>, and in that case, “accept” the update. In webpack it could look like something:</p><p>一旦你把它连接起来，你就有了最后一个问题。您的捆绑器不知道您正在处理更新，所以它可能会重新加载页面。你需要告诉它不要这样做。这仍然是特定于捆绑器的，但我建议的方法是检查所有出口是否都是 React 组件，在这种情况下，“接受”更新。在 webpack 中，它可以看起来像这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; ...ALL MODULE CODE...</span><br><span class="line"></span><br><span class="line">const myExports &#x3D; module.exports; </span><br><span class="line">&#x2F;&#x2F; Note: I think with ES6 exports you might also have to look at .__proto__, at least in webpack</span><br><span class="line"></span><br><span class="line">if (isReactRefreshBoundary(myExports)) &#123;</span><br><span class="line">  module.hot.accept(); &#x2F;&#x2F; Depends on your bundler</span><br><span class="line">  enqueueUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What is <code>isReactRefreshBoundary</code>? It’s a thing that enumerates over exports shallowly and determines whether it only exports React components. That’s how you decide whether to accept an update or not. I didn’t copy paste it here but <a href="https://github.com/facebook/metro/blob/febdba2383113c88296c61e28e4ef6a7f4939fda/packages/metro/src/lib/polyfills/require.js#L748-L774">this implementation</a> could be a good start. (In that code, <code>Refresh</code> refers to <code>react-refresh/runtime</code> export).</p><p>什么是 reactrefreshboundary？这是一个简单列举出口并决定是否只出口反应元件的事情。这就是你决定是否接受更新的方式。我没有复制粘贴它在这里，但这个实现可以是一个很好的开始。(在该代码中，Refresh 指的是 react-Refresh/runtime export)。</p><p>You’ll also want to <a href="https://github.com/codesandbox/codesandbox-client/commit/b3633367c18b0ac664fd2c4419e8e1c76333b890">manually register all exports</a> because Babel transform will only call <code>$RefreshReg$</code> for functions. If you don’t do this, updates to classes won’t be detected.</p><p>您还需要手动注册所有导出，因为 Babel 转换只会为函数调用 $RefreshReg $。如果不这样做，就不会检测到类的更新。</p><p>Finally, the <code>enqueueUpdate()</code> function would be something shared between modules that debounces and performs the actual React update.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const runtime &#x3D; require(&#39;react-refresh&#x2F;runtime&#39;);</span><br><span class="line"></span><br><span class="line">let enqueueUpdate &#x3D; debounce(runtime.performReactRefresh, 30);</span><br></pre></td></tr></table></figure><p>By this point you should have something working.</p><h3 id="Nuances"><a href="#Nuances" class="headerlink" title="Nuances"></a>Nuances</h3><h3 id="细微差别"><a href="#细微差别" class="headerlink" title="细微差别"></a>细微差别</h3><p>There are some baseline experience expectations that I care about that go into “Fast Refresh” branding. It should be able to gracefully recover from a syntax error, a module initialization error, or a rendering error. I won’t go into these mechanisms in detail, but I feel very strongly that you shouldn’t call your experiment “Fast Refresh” until it handle those cases well.</p><p>Unfortunately, I don’t know if webpack can support all of those, but we can ask for help if you get to a somewhat working state but then get stuck. For example, I’ve noticed that webpack’s <code>accept()</code> API makes error recovery more difficult (you need to accept a <em>previous</em> version of the module after an error), but there’s a way to hack around that. Another thing we’ll need to get back to is to automatically “register” all exports, and not just the ones found by the Babel plugin. For now, let’s ignore this, but if you have something that works for e.g. webpack, I can look at polishing it.</p><p>Similarly, we’d need to integrate it with an “error box” experience, similar to <code>react-error-overlay</code> we have in Create React App. That has some nuance, like the error box should disappear when you fix an error. That also takes some further work we can do once the foundation’s in place.</p><p>Let me know if you have any questions!</p><p>翻译链接：<a href="https://github.com/facebook/react/issues/16604#issuecomment-528663101">https://github.com/facebook/react/issues/16604#issuecomment-528663101</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack【可替换模板字符串[name]/[id]/...等变量名释义】</title>
      <link href="/2020/08/29/webpack-temp-string/"/>
      <url>/2020/08/29/webpack-temp-string/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack【可替换模板字符串】"><a href="#webpack【可替换模板字符串】" class="headerlink" title="webpack【可替换模板字符串】"></a>webpack【<strong>可替换模板字符串</strong>】</h3><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>在webpack中，常遇到[name]/[hash]/[id]等占位符，这些占位符多是用来解决<strong>多个入口起点</strong>(entry point)、<strong>代码拆分</strong>(code splitting)或各种插件(plugin)创建<strong>多个 bundle</strong>时的名称或者lib。</p><p>webpack中通过内置的<a href="https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js">TemplatedPathPlugin</a>实现了占位符的替换处理工作。</p><h4 id="二、名词解析"><a href="#二、名词解析" class="headerlink" title="二、名词解析"></a>二、名词解析</h4><h5 id="1-name"><a href="#1-name" class="headerlink" title="1.[name]"></a>1.[name]</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    entry: &#123; <span class="attr">index</span>: <span class="string">&quot;./index.js&quot;</span> &#125;,</span><br><span class="line">    output: &#123; <span class="attr">filename</span>: <span class="string">&quot;[name].bundle.js&quot;</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[name]一般指的是entry入口定义的输入文件key值，例如此处为index。</p><p>多个入口key分别对应各自的[name]。</p><h5 id="2-id"><a href="#2-id" class="headerlink" title="2.[id]"></a>2.[id]</h5><p>模块标识符(module identifier)。</p><p>id一般用于动态加载模块时，一次构建后，动态加载模块生成的id 。</p><h5 id="3-hash"><a href="#3-hash" class="headerlink" title="3.[hash]"></a>3.[hash]</h5><p>模块标识符(module identifier)的 hash。</p><p>hash是有webpack是一次构建打包生成的hash。</p><h5 id="4-chunkhash"><a href="#4-chunkhash" class="headerlink" title="4.[chunkhash]"></a>4.[chunkhash]</h5><p>根据入口的每一个chunk的内容，生成独有的一份hash。webpack以js为入口，每一个入口通过配置合理的插件可以差分多个文件，例如剥离CSS等，但这些资源文件都归属一个chunk。</p><p>一旦chunk内容发生（可以理解为入口文件未做剥离前的文件构成发生改变），该chunk的hash就会发生变化。</p><h5 id="5-contenthash"><a href="#5-contenthash" class="headerlink" title="5.[contenthash]"></a>5.[contenthash]</h5><p>文件内容 hash，<strong>每个资源</strong>生成的 hash 都是不同的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack【名词术语】</title>
      <link href="/2020/08/29/webpack-terms/"/>
      <url>/2020/08/29/webpack-terms/</url>
      
        <content type="html"><![CDATA[<h3 id="webpack【名词术语】"><a href="#webpack【名词术语】" class="headerlink" title="webpack【名词术语】"></a>webpack【名词术语】</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      entry: &#123;</span><br><span class="line">            index: [<span class="string">&quot;./index.js&quot;</span>,<span class="string">&quot;./src/index.js&quot;</span>],</span><br><span class="line">          entry: [<span class="string">&quot;./src/entry.js&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="一、名词术语"><a href="#一、名词术语" class="headerlink" title="一、名词术语"></a>一、名词术语</h5><p>1.【<strong>modules</strong>】：<code>&quot;./index.js&quot;</code>、<code>&quot;./src/index.js&quot;</code> and <code>&quot;./src/entry.js&quot;</code> ( any other modules that are dependencies of these entry points)</p><p>2.【<strong>Chunks</strong>】：index、entry</p><p>3.【<strong>Bundles</strong>】：index、entry</p><p><strong>备注</strong>：如果配置中添加了source maps，split css等，意味着chunks:bundles = 1:2；</p><p>4.mode：</p><p>webpack运行时还会根据mode设置一个全局变量process.env.NODE_ENV,这里的process.env.NODE_ENV不是node中的环境变量,而是webpack.DefinePlugin中定义的全局变量,允许你根据不同的环境执行不同的代码.</p>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
